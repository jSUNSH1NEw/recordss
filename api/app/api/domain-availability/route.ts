import { type NextRequest, NextResponse } from "next/server"

// Configure CORS to allow requests from your frontend
const corsHeaders = {
  "Access-Control-Allow-Origin": "*", // Allow all origins for testing
  "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
  "Access-Control-Allow-Headers": "Content-Type, Authorization",
}

// Handle OPTIONS requests for CORS preflight
export async function OPTIONS() {
  return NextResponse.json({}, { headers: corsHeaders })
}

export async function POST(request: NextRequest) {
  try {
    // Parse the request body
    const { domain } = await request.json()

    // Validate domain input
    if (!domain || typeof domain !== "string") {
      return NextResponse.json({ error: "Invalid domain provided" }, { status: 400, headers: corsHeaders })
    }

    // Sanitize domain input and extract parts
    const sanitizedDomain = domain.trim().toLowerCase()
    const parts = sanitizedDomain.split(".")

    if (parts.length < 2) {
      return NextResponse.json(
        { error: "Invalid domain format. Must include TLD (e.g., example.com)" },
        { status: 400, headers: corsHeaders },
      )
    }

    const domainName = parts[0]
    const tld = parts.slice(1).join(".")

    // Check domain availability using multiple methods
    const availabilityResult = await checkDomainAvailability(domainName, tld)

    // Get pricing information for available domains
    let pricingInfo = null
    if (availabilityResult.available) {
      pricingInfo = await getDomainPricing(domainName, tld)
    }

    // Generate purchase links
    const purchaseLinks = generatePurchaseLinks(domainName, tld)

    return NextResponse.json(
      {
        domain: sanitizedDomain,
        availability: availabilityResult,
        pricing: pricingInfo,
        purchaseLinks,
        status: "success",
      },
      { headers: corsHeaders },
    )
  } catch (error) {
    console.error("Domain availability check error:", error)

    return NextResponse.json(
      { error: "Failed to check domain availability", details: (error as Error).message },
      { status: 500, headers: corsHeaders },
    )
  }
}

async function performComprehensiveDnsCheck(domain: string) {
  const recordTypes = ["A", "AAAA", "MX", "NS", "TXT", "SOA", "CNAME"]
  const results = {}
  let hasRecords = false
  let hasWebRecords = false // Spécifiquement pour A, AAAA, CNAME

  // Check each record type
  for (const recordType of recordTypes) {
    try {
      // Try Google DNS API first
      const response = await fetch(`https://dns.google/resolve?name=${encodeURIComponent(domain)}&type=${recordType}`)

      if (response.ok) {
        const data = await response.json()
        results[recordType] = data

        // If we find any answers for this record type, mark as having records
        if (data.Answer && data.Answer.length > 0) {
          hasRecords = true

          // Check specifically for web records (A, AAAA, CNAME)
          if (["A", "AAAA", "CNAME"].includes(recordType)) {
            hasWebRecords = true
          }
        }
      }
    } catch (error) {
      console.error(`Error checking ${recordType} records for ${domain}:`, error)
    }
  }

  return {
    hasRecords,
    hasWebRecords,
    recordsFound: results,
    icpCompatible: !hasWebRecords, // Un domaine est compatible ICP s'il n'a pas déjà des enregistrements web
  }
}

async function checkDomainAvailability(domainName: string, tld: string) {
  const domain = `${domainName}.${tld}`

  try {
    // First, perform a comprehensive DNS check
    const dnsCheckResult = await performComprehensiveDnsCheck(domain)

    if (dnsCheckResult.hasRecords) {
      // If DNS records exist, the domain is definitely taken
      return {
        available: false,
        domainName,
        tld,
        method: "dns-check",
        dnsCheckResult,
        icpCompatible: dnsCheckResult.icpCompatible,
        note: dnsCheckResult.icpCompatible
          ? "Domain is in use but appears compatible with Internet Computer configuration."
          : "Domain is in use with active web records (A, AAAA, CNAME). May require DNS changes for Internet Computer.",
      }
    }

    // If no DNS records found, try WHOIS API as a secondary check
    try {
      const whoisResponse = await fetch(`https://whoisjson.com/api/v1/whois?domain=${domain}`)

      if (whoisResponse.ok) {
        const whoisData = await whoisResponse.json()

        // If domain is registered according to WHOIS
        if (whoisData.registered) {
          return {
            available: false,
            domainName,
            tld,
            method: "whois",
            whoisData: {
              registrar: whoisData.registrar || "Unknown",
              creationDate: whoisData.created || "Unknown",
              expiryDate: whoisData.expires || "Unknown",
            },
            note: "Domain is registered according to WHOIS records.",
          }
        }

        // If WHOIS says it's not registered, we need to be careful
        // Some premium or reserved domains might not show as registered
        // Let's do some additional checks for common TLDs

        // For popular TLDs, if the domain is very short or a dictionary word, it's likely taken or premium
        if (["com", "net", "org", "io", "co", "app"].includes(tld.toLowerCase())) {
          if (domainName.length <= 3 || isCommonWord(domainName)) {
            return {
              available: false,
              domainName,
              tld,
              method: "heuristic",
              note: "This appears to be a premium or reserved domain name. Please check with a registrar directly.",
            }
          }
        }

        // At this point, the domain is likely available
        return {
          available: true,
          domainName,
          tld,
          method: "whois",
          note: "Domain appears to be available for registration. Verify with a registrar for final confirmation.",
        }
      }
    } catch (whoisError) {
      console.error("WHOIS API error:", whoisError)
      // Continue to alternative check if WHOIS fails
    }

    // As a final check, try domain availability heuristics
    return checkDomainAvailabilityHeuristic(domainName, tld, dnsCheckResult)
  } catch (error) {
    console.error("Domain availability check error:", error)

    // Return a conservative result if all checks fail
    return {
      available: null,
      domainName,
      tld,
      method: "failed",
      error: (error as Error).message,
      note: "Could not determine availability. Please check with a registrar directly.",
    }
  }
}

function checkDomainAvailabilityHeuristic(domainName: string, tld: string, dnsCheckResult: any) {
  // Popular domains that are definitely taken
  const popularDomains = [
    "google",
    "facebook",
    "amazon",
    "apple",
    "microsoft",
    "twitter",
    "instagram",
    "netflix",
    "yahoo",
    "github",
    "linkedin",
    "reddit",
    "twitch",
    "spotify",
    "snapchat",
    "wordpress",
    "gmail",
    "youtube",
    "pinterest",
    "tumblr",
    "medium",
    "whatsapp",
    "telegram",
    "slack",
    "discord",
    "zoom",
    "tiktok",
    "uber",
    "lyft",
    "airbnb",
    "dropbox",
    "evernote",
    "notion",
    "shopify",
    "stripe",
    "paypal",
    "wix",
    "squarespace",
    "godaddy",
    "namecheap",
    "mailchimp",
    "salesforce",
    "adobe",
    "nvidia",
    "intel",
    "amd",
    "ibm",
    "oracle",
    "cisco",
    "dell",
    "hp",
    "lenovo",
    "samsung",
    "sony",
    "lg",
    "panasonic",
    "nokia",
    "motorola",
    "huawei",
    "xiaomi",
    "oppo",
    "vivo",
    "oneplus",
    "htc",
    "asus",
    "acer",
    "msi",
    "razer",
    "logitech",
    "corsair",
    "walmart",
    "target",
    "costco",
    "ebay",
    "etsy",
    "shopify",
    "alibaba",
    "aliexpress",
    "tencent",
    "baidu",
    "weibo",
    "qq",
    "taobao",
    "odoo",
  ]

  if (popularDomains.includes(domainName.toLowerCase())) {
    return {
      available: false,
      domainName,
      tld,
      method: "known-domain",
      note: "This is a well-known brand or service and is not available.",
    }
  }

  // If it's a one-word dictionary term in a popular TLD, it's likely taken
  if (["com", "net", "org"].includes(tld.toLowerCase()) && isCommonWord(domainName)) {
    return {
      available: false,
      domainName,
      tld,
      method: "dictionary-word",
      note: "Single-word dictionary domains in popular TLDs are typically already registered or premium.",
    }
  }

  // For short domain names in popular TLDs, they're likely taken or premium
  if (["com", "net", "org", "io", "co", "app"].includes(tld.toLowerCase()) && domainName.length <= 4) {
    return {
      available: false,
      domainName,
      tld,
      method: "short-domain",
      note: "Short domain names in popular TLDs are typically already registered or premium.",
    }
  }

  // If we've made it this far and our DNS check found no records,
  // the domain might be available
  return {
    available: true,
    domainName,
    tld,
    method: "heuristic",
    note: "Domain may be available, but please verify with a registrar for final confirmation.",
  }
}

// Simple check if a name might be a common English word
// In a real application, this would use a proper dictionary API or word list
function isCommonWord(word: string) {
  // This is a very simplified check - would be more robust in production
  const commonWords = [
    "about",
    "above",
    "across",
    "act",
    "active",
    "activity",
    "add",
    "afraid",
    "after",
    "again",
    "age",
    "ago",
    "agree",
    "air",
    "all",
    "alone",
    "along",
    "already",
    "always",
    "am",
    "amount",
    "an",
    "and",
    "angry",
    "another",
    "answer",
    "any",
    "anyone",
    "anything",
    "anytime",
    "appear",
    "apple",
    "are",
    "area",
    "arm",
    "army",
    "around",
    "arrive",
    "art",
    "article",
    "as",
    "ask",
    "at",
    "attack",
    "aunt",
    "away",
    "baby",
    "back",
    "bad",
    "bag",
    "ball",
    "bank",
    "base",
    "basket",
    "bath",
    "be",
    "bean",
    "bear",
    "beautiful",
    "bed",
    "bedroom",
    "beer",
    "best",
    "better",
    "between",
    "big",
    "bird",
    "birth",
    "birthday",
    "bit",
    "bite",
    "black",
    "blame",
    "blood",
    "blow",
    "blue",
    "board",
    "boat",
    "body",
    "book",
    "border",
    "born",
    "both",
    "boy",
    "break",
    "breakfast",
    "bring",
    "brother",
    "brown",
    "build",
    "burn",
    "business",
    "bus",
    "busy",
    "but",
    "buy",
    "by",
    "cake",
    "call",
    "can",
    "car",
    "card",
    "care",
    "carry",
    "case",
    "cat",
    "catch",
    "chair",
    "chance",
    "change",
    "check",
    "child",
    "church",
    "city",
    "class",
    "clean",
    "clear",
    "climb",
    "clock",
    "close",
    "cloth",
    "clothes",
    "cloud",
    "coffee",
    "cold",
    "come",
    "computer",
    "continue",
    "control",
    "cook",
    "cool",
    "copy",
    "could",
    "count",
    "country",
    "course",
    "cover",
    "cow",
    "crash",
    "cross",
    "cry",
    "cup",
    "cut",
    "dance",
    "dark",
    "data",
    "date",
    "day",
    "dead",
    "deal",
    "dear",
    "death",
    "deep",
    "describe",
    "desk",
    "detail",
    "develop",
    "die",
    "different",
    "dinner",
    "dirty",
    "do",
    "dog",
    "door",
    "double",
    "down",
    "draw",
    "dream",
    "dress",
    "drink",
    "drive",
    "drop",
    "dry",
    "dust",
    "duty",
    "each",
    "ear",
    "early",
    "earn",
    "earth",
    "east",
    "easy",
    "eat",
    "edge",
    "egg",
    "eight",
    "else",
    "empty",
    "end",
    "enemy",
    "enjoy",
    "enough",
    "enter",
    "equal",
    "even",
    "event",
    "ever",
    "every",
    "exact",
    "except",
    "expect",
    "explain",
    "eye",
    "face",
    "fact",
    "fail",
    "fall",
    "family",
    "famous",
    "far",
    "farm",
    "fast",
    "fat",
    "fault",
    "fear",
    "feed",
    "feel",
    "female",
    "field",
    "fight",
    "figure",
    "file",
    "fill",
    "film",
    "final",
    "find",
    "fine",
    "fire",
    "first",
    "fish",
    "fit",
    "five",
    "fix",
    "flag",
    "flat",
    "float",
    "floor",
    "fly",
    "fold",
    "food",
    "foot",
    "for",
    "force",
    "forest",
    "forget",
    "form",
    "fox",
    "four",
    "free",
    "friend",
    "from",
    "front",
    "fruit",
    "full",
    "fun",
    "funny",
    "future",
    "game",
    "garden",
    "gas",
    "gate",
    "general",
    "gift",
    "give",
    "glad",
    "glass",
    "go",
    "gold",
    "good",
    "goodbye",
    "grandfather",
    "grandmother",
    "grass",
    "grave",
    "great",
    "green",
    "grey",
    "ground",
    "group",
    "grow",
    "gun",
    "hair",
    "half",
    "hall",
    "hand",
    "happen",
    "happy",
    "hard",
    "hat",
    "hate",
    "have",
    "he",
    "head",
    "health",
    "hear",
    "heart",
    "heaven",
    "heavy",
    "hello",
    "help",
    "hen",
    "her",
    "here",
    "hers",
    "hide",
    "high",
    "hill",
    "him",
    "his",
    "hit",
    "hobby",
    "hold",
    "hole",
    "holiday",
    "home",
    "hope",
    "horse",
    "hospital",
    "hot",
    "hotel",
    "hour",
    "house",
    "how",
    "however",
    "hundred",
    "hungry",
    "husband",
    "hurt",
    "ice",
    "idea",
    "if",
    "ill",
    "important",
    "in",
    "include",
    "income",
    "increase",
    "indeed",
    "inside",
    "instead",
    "insure",
    "interest",
    "into",
    "introduce",
    "invent",
    "invite",
    "iron",
    "is",
    "island",
    "it",
    "its",
    "job",
    "join",
    "juice",
    "jump",
    "just",
    "keep",
    "key",
    "kill",
    "kind",
    "king",
    "kitchen",
    "knee",
    "knife",
    "knock",
    "know",
    "lady",
    "lamp",
    "land",
    "large",
    "last",
    "late",
    "laugh",
    "lazy",
    "lead",
    "leaf",
    "learn",
    "leave",
    "leg",
    "left",
    "lend",
    "length",
    "less",
    "lesson",
    "let",
    "letter",
    "level",
    "lie",
    "life",
    "light",
    "like",
    "lion",
    "lip",
    "list",
    "listen",
    "little",
    "live",
    "lock",
    "lonely",
    "long",
    "look",
    "lose",
    "lot",
    "love",
    "low",
    "lower",
    "luck",
    "main",
    "make",
    "male",
    "man",
    "many",
    "map",
    "mark",
    "market",
    "marry",
    "matter",
    "may",
    "me",
    "meal",
    "mean",
    "measure",
    "meat",
    "meet",
    "member",
    "men",
    "mend",
    "milk",
    "million",
    "mind",
    "mine",
    "minute",
    "miss",
    "mistake",
    "mix",
    "model",
    "money",
    "month",
    "moon",
    "more",
    "morning",
    "most",
    "mother",
    "mountain",
    "mouth",
    "move",
    "much",
    "music",
    "must",
    "my",
    "name",
    "narrow",
    "nation",
    "nature",
    "near",
    "nearly",
    "neck",
    "need",
    "needle",
    "neighbor",
    "neither",
    "net",
    "never",
    "new",
    "news",
    "newspaper",
    "next",
    "nice",
    "night",
    "nine",
    "no",
    "noble",
    "noise",
    "none",
    "nor",
    "north",
    "nose",
    "not",
    "nothing",
    "notice",
    "now",
    "number",
    "obey",
    "object",
    "ocean",
    "of",
    "off",
    "offer",
    "office",
    "often",
    "oil",
    "old",
    "on",
    "one",
    "only",
    "open",
    "opposite",
    "or",
    "orange",
    "order",
    "other",
    "our",
    "out",
    "outside",
    "over",
    "own",
    "page",
    "pain",
    "paint",
    "pair",
    "pan",
    "paper",
    "parent",
    "park",
    "part",
    "party",
    "pass",
    "past",
    "path",
    "pay",
    "peace",
    "pen",
    "people",
    "pepper",
    "perhaps",
    "person",
    "pet",
    "pick",
    "picture",
    "piece",
    "pig",
    "pin",
    "pink",
    "place",
    "plane",
    "plant",
    "plate",
    "play",
    "please",
    "plenty",
    "point",
    "police",
    "pool",
    "poor",
    "popular",
    "position",
    "possible",
    "potato",
    "pour",
    "power",
    "present",
    "press",
    "pretty",
    "price",
    "prince",
    "prison",
    "private",
    "prize",
    "probably",
    "problem",
    "produce",
    "promise",
    "proper",
    "protect",
    "provide",
    "public",
    "pull",
    "punish",
    "pupil",
    "push",
    "put",
    "queen",
    "question",
    "quick",
    "quiet",
    "quite",
    "radio",
    "rain",
    "rainy",
    "raise",
    "reach",
    "read",
    "ready",
    "real",
    "really",
    "reason",
    "receive",
    "record",
    "red",
    "remember",
    "remind",
    "remove",
    "rent",
    "repair",
    "repeat",
    "reply",
    "report",
    "rest",
    "restaurant",
    "result",
    "return",
    "rice",
    "rich",
    "ride",
    "right",
    "ring",
    "rise",
    "road",
    "rob",
    "rock",
    "room",
    "round",
    "rude",
    "rule",
    "ruler",
    "run",
    "rush",
    "sad",
    "safe",
    "sail",
    "salt",
    "same",
    "sand",
    "save",
    "say",
    "school",
    "science",
    "scissors",
    "search",
    "seat",
    "second",
    "see",
    "seem",
    "sell",
    "send",
    "sentence",
    "serve",
    "seven",
    "several",
    "sex",
    "shade",
    "shadow",
    "shake",
    "shape",
    "share",
    "sharp",
    "she",
    "sheep",
    "sheet",
    "shelf",
    "shine",
    "ship",
    "shirt",
    "shoe",
    "shoot",
    "shop",
    "short",
    "should",
    "shoulder",
    "shout",
    "show",
    "sick",
    "side",
    "signal",
    "silence",
    "silly",
    "silver",
    "similar",
    "simple",
    "single",
    "since",
    "sing",
    "sink",
    "sister",
    "sit",
    "six",
    "size",
    "skill",
    "skin",
    "skirt",
    "sky",
    "sleep",
    "slip",
    "slow",
    "small",
    "smell",
    "smile",
    "smoke",
    "snow",
    "so",
    "soap",
    "sock",
    "soft",
    "some",
    "someone",
    "something",
    "sometimes",
    "son",
    "soon",
    "sorry",
    "sound",
    "soup",
    "south",
    "space",
    "speak",
    "special",
    "speed",
    "spell",
    "spend",
    "spoon",
    "sport",
    "spread",
    "spring",
    "square",
    "stamp",
    "stand",
    "star",
    "start",
    "station",
    "stay",
    "steal",
    "steam",
    "step",
    "still",
    "stomach",
    "stone",
    "stop",
    "store",
    "storm",
    "story",
    "strange",
    "street",
    "strong",
    "student",
    "study",
    "stupid",
    "such",
    "sudden",
    "sugar",
    "suitable",
    "summer",
    "sun",
    "sunny",
    "support",
    "sure",
    "surprise",
    "sweet",
    "swim",
    "sword",
    "table",
    "take",
    "talk",
    "tall",
    "taste",
    "taxi",
    "tea",
    "teach",
    "team",
    "tear",
    "telephone",
    "tell",
    "ten",
    "tennis",
    "terrible",
    "test",
    "than",
    "that",
    "the",
    "their",
    "then",
    "there",
    "therefore",
    "these",
    "thick",
    "thin",
    "thing",
    "think",
    "third",
    "this",
    "though",
    "threat",
    "three",
    "tidy",
    "tie",
    "title",
    "to",
    "today",
    "toe",
    "together",
    "tomorrow",
    "tonight",
    "too",
    "tool",
    "tooth",
    "top",
    "total",
    "touch",
    "town",
    "train",
    "tram",
    "travel",
    "tree",
    "trouble",
    "true",
    "trust",
    "twice",
    "try",
    "turn",
    "type",
    "ugly",
    "uncle",
    "under",
    "understand",
    "unit",
    "until",
    "up",
    "use",
    "useful",
    "usual",
    "usually",
    "vegetable",
    "very",
    "village",
    "voice",
    "visit",
    "wait",
    "wake",
    "walk",
    "want",
    "warm",
    "was",
    "wash",
    "waste",
    "watch",
    "water",
    "way",
    "we",
    "weak",
    "wear",
    "weather",
    "wedding",
    "week",
    "weight",
    "welcome",
    "were",
    "well",
    "west",
    "wet",
    "what",
    "wheel",
    "when",
    "where",
    "which",
    "while",
    "white",
    "who",
    "why",
    "wide",
    "wife",
    "wild",
    "will",
    "win",
    "wind",
    "window",
    "wine",
    "winter",
    "wire",
    "wise",
    "wish",
    "with",
    "without",
    "woman",
    "wonder",
    "word",
    "work",
    "world",
    "worry",
    "worst",
    "write",
    "wrong",
    "year",
    "yellow",
    "yes",
    "yesterday",
    "yet",
    "you",
    "young",
    "your",
    "zero",
    "zoo",
  ]

  return commonWords.includes(word.toLowerCase())
}

async function getDomainPricing(domainName: string, tld: string) {
  // This is a simplified pricing model
  // In a real implementation, you would query registrar APIs for accurate pricing

  const commonTldPricing: Record<string, { registration: number; renewal: number }> = {
    com: { registration: 9.99, renewal: 12.99 },
    net: { registration: 11.99, renewal: 14.99 },
    org: { registration: 12.99, renewal: 15.99 },
    io: { registration: 39.99, renewal: 49.99 },
    co: { registration: 29.99, renewal: 34.99 },
    ai: { registration: 79.99, renewal: 89.99 },
    app: { registration: 15.99, renewal: 19.99 },
    dev: { registration: 14.99, renewal: 17.99 },
    me: { registration: 19.99, renewal: 24.99 },
    xyz: { registration: 8.99, renewal: 12.99 },
    info: { registration: 9.99, renewal: 14.99 },
    biz: { registration: 12.99, renewal: 16.99 },
    fr: { registration: 14.99, renewal: 14.99 },
    uk: { registration: 10.99, renewal: 10.99 },
    ca: { registration: 13.99, renewal: 13.99 },
    de: { registration: 9.99, renewal: 9.99 },
    es: { registration: 12.99, renewal: 12.99 },
    it: { registration: 11.99, renewal: 11.99 },
    nl: { registration: 13.99, renewal: 13.99 },
    tv: { registration: 29.99, renewal: 39.99 },
  }

  // Get pricing for the TLD or use a default
  const pricing = commonTldPricing[tld] || { registration: 19.99, renewal: 24.99 }

  // Premium domain pricing based on length
  let premiumFactor = 1.0
  if (domainName.length <= 3) {
    premiumFactor = 10.0 // Very short domains are premium
  } else if (domainName.length <= 5) {
    premiumFactor = 2.0 // Short domains are somewhat premium
  } else if (/^[a-z]+$/.test(domainName) && domainName.length <= 8) {
    premiumFactor = 1.5 // Dictionary words are somewhat premium
  }

  return {
    currency: "USD",
    registration: {
      namecheap: Number.parseFloat((pricing.registration * premiumFactor).toFixed(2)),
      godaddy: Number.parseFloat((pricing.registration * 1.2 * premiumFactor).toFixed(2)),
      porkbun: Number.parseFloat((pricing.registration * 0.9 * premiumFactor).toFixed(2)),
      dynadot: Number.parseFloat((pricing.registration * 1.1 * premiumFactor).toFixed(2)),
    },
    renewal: {
      namecheap: Number.parseFloat((pricing.renewal * premiumFactor).toFixed(2)),
      godaddy: Number.parseFloat((pricing.renewal * 1.3 * premiumFactor).toFixed(2)),
      porkbun: Number.parseFloat((pricing.renewal * 0.95 * premiumFactor).toFixed(2)),
      dynadot: Number.parseFloat((pricing.renewal * 1.15 * premiumFactor).toFixed(2)),
    },
    transfer: {
      namecheap: Number.parseFloat((pricing.registration * 0.9 * premiumFactor).toFixed(2)),
      godaddy: Number.parseFloat((pricing.registration * 1.1 * premiumFactor).toFixed(2)),
      porkbun: Number.parseFloat((pricing.registration * 0.85 * premiumFactor).toFixed(2)),
      dynadot: Number.parseFloat((pricing.registration * 1.0 * premiumFactor).toFixed(2)),
    },
    note: "These are estimated prices. Actual prices may vary. Check with the registrar for accurate pricing.",
  }
}

function generatePurchaseLinks(domainName: string, tld: string) {
  const domain = `${domainName}.${tld}`

  return {
    namecheap: `https://www.namecheap.com/domains/registration/results/?domain=${domain}`,
    godaddy: `https://www.godaddy.com/domainsearch/find?domainToCheck=${domain}`,
    porkbun: `https://porkbun.com/checkout/search?q=${domain}`,
    dynadot: `https://www.dynadot.com/domain/search?domain=${domain}`,
    gandi: `https://www.gandi.net/en/domain/suggest?search=${domain}`,
    cloudflare: `https://dash.cloudflare.com/?to=/:account/domains/register/${domain}`,
    google: `https://domains.google.com/registrar/search?searchTerm=${domain}`,
    hover: `https://www.hover.com/domains/results?q=${domain}`,
  }
}

